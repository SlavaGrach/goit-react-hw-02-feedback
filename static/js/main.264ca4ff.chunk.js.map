{"version":3,"sources":["FeedbackOptions/FeedbackOptions.jsx","Statistics/Statistics.jsx","Section/Section.jsx","Notification/Notification.jsx","App.jsx","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","Object","keys","map","option","onClick","name","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","message","App","state","handleChangeStatistics","e","setState","prev","target","countTotalFidback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAsBeA,MAnBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAGlC,OAFAD,EAAUE,OAAOC,KAAKH,GAGpB,8BACGA,EAAQI,KAAI,SAAAC,GAAM,OACjB,wBAAQC,QAASL,EAAiBM,KAAMF,EAAxC,SACGA,UCeIG,MAtBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,8BACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,aCMOC,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,gCACE,6BAAKD,IACJC,MCIQC,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,8BAAMA,KCKMC,E,4MACnBC,MAAQ,CACNX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPU,uBAAyB,SAAAC,GACvB,EAAKC,UAAS,SAAAC,GAAI,sBACfF,EAAEG,OAAOlB,KAAOiB,EAAKF,EAAEG,OAAOlB,MAAQ,O,EAI3CmB,kBAAoB,WAClB,MAA+B,EAAKN,MACpC,OADA,EAAQX,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzBgB,gCAAkC,WAChC,MAA+B,EAAKP,MAA5BX,EAAR,EAAQA,KAAR,EAAcC,QAAd,EAAuBC,IACvB,OAAoC,IAA7B,EAAKe,oBACRE,KAAKC,MAAOpB,EAAO,EAAKiB,oBAAuB,KAC/C,G,4CAGN,WACE,OACE,gCACE,cAAC,EAAD,CAASX,MAAM,wBAAf,SACE,cAAC,EAAD,CACEf,QAAS8B,KAAKV,MACdnB,gBAAiB6B,KAAKT,2BAI1B,cAAC,EAAD,CAASN,MAAM,aAAf,SACGe,KAAKJ,oBAAsB,EAC1B,cAAC,EAAD,CACEjB,KAAMqB,KAAKV,MAAMX,KACjBC,QAASoB,KAAKV,MAAMV,QACpBC,IAAKmB,KAAKV,MAAMT,IAChBC,MAAOkB,KAAKJ,oBACZb,mBAAoBiB,KAAKH,oCAG3B,cAAC,EAAD,CAAcT,QAAQ,+B,GA7CDa,aCJjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.264ca4ff.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\n  options = Object.keys(options);\n\n  return (\n    <div>\n      {options.map(option => (\n        <button onClick={onLeaveFeedback} name={option}>\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.object.isRequired,\n  onChangeStatistics: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <div>\n      <ul>\n        <li>Good: {good}</li>\n        <li>Neutral: {neutral}</li>\n        <li>Bad: {bad}</li>\n        <li>Total: {total}</li>\n        <li>Positive feedback: {positivePercentage}%</li>\n      </ul>\n    </div>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Section({ title, children }) {\n  return (\n    <div>\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Notification({ message }) {\n  return <div>{message}</div>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import './App.css';\n\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\nimport Statistics from './Statistics/Statistics';\nimport Section from './Section/Section';\nimport Notification from './Notification/Notification';\n\nimport React, { Component } from 'react';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleChangeStatistics = e => {\n    this.setState(prev => ({\n      [e.target.name]: prev[e.target.name] + 1,\n    }));\n  };\n\n  countTotalFidback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good, neutral, bad } = this.state;\n    return this.countTotalFidback() !== 0\n      ? Math.round((good / this.countTotalFidback()) * 100)\n      : 0;\n  };\n\n  render() {\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={this.state}\n            onLeaveFeedback={this.handleChangeStatistics}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {this.countTotalFidback() > 0 ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFidback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}